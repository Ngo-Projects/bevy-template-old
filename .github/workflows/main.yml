name: Export and Publish
env:
  BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
  ITCH_GAME: ${{ secrets.ITCH_GAME }}
  ITCH_USER: ${{ secrets.ITCH_USER }}
on:
  push:
    branches: [main]
permissions: write-all

jobs:
  build-binaries:
    name: Build game binaries for each platform
    strategy:
      fail-fast: false
      matrix:
        platform:
          [
            {
              name: linux,
              runner: ubuntu-latest,
              toolchain: stable,
              target: x86_64-unknown-linux-gnu,
              extension: "",
            },
            {
              name: macos-arm,
              runner: macos-14,
              toolchain: nightly,
              target: aarch64-apple-darwin,
              extension: ".arm64",
            },
            {
              name: macos-intel,
              runner: macos-latest,
              toolchain: stable,
              target: x86_64-apple-darwin,
              extension: ".x86_64",
            },
            {
              name: web,
              runner: ubuntu-latest,
              toolchain: stable,
              target: wasm32-unknown-unknown,
              extension: ".zip",
            },
            {
              name: windows,
              runner: windows-latest,
              toolchain: stable,
              target: x86_64-pc-windows-msvc,
              extension: ".exe",
            },
          ]
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ubuntu dependencies
        if: matrix.platform.runner == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev libwayland-dev
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.platform.toolchain }}
          override: true
      - name: Package web build
        if: matrix.platform.name == 'web'
        run: |
          cargo install cargo-binstall
          cargo binstall -y trunk
          mkdir -p target/web
          trunk build --release
          cd target/web
          tar -acf ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}.zip *
      - name: Cargo build
        if: matrix.platform.name != 'web'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.platform.target }}
      - name: Zip Linux/Windows builds
        if: matrix.platform.name == 'linux' || matrix.platform.name == 'windows'
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar -acf ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}.zip ${{ env.ITCH_GAME }}${{ matrix.platform.extension }}
      - name: Upload Linux/Windows artifact
        if: matrix.platform.name == 'web'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}
          path: target/web/${{ env.ITCH_GAME }}_${{ matrix.platform.name }}.zip
      - name: Upload web artifact
        if: matrix.platform.name == 'linux' || matrix.platform.name == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/${{ env.ITCH_GAME }}_${{ matrix.platform.name }}.zip
      - name: Rename macOS build
        if: contains(matrix.platform.name, 'macos')
        run: |
          cd target/${{ matrix.platform.target }}/release
          ls -la
          mv ${{ env.ITCH_GAME }} ${{ env.ITCH_GAME }}${{ matrix.platform.extension }}
      - name: Upload artifact macOS
        if: contains(matrix.platform.name, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/${{ env.ITCH_GAME }}${{ matrix.platform.extension }}
  bundle-universal-app:
    name: Bundle universal macOS app
    needs: build-binaries
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifact-macos-*
          path: artifacts
      - name: Bundle universal app
        run: |
          ls -la artifacts
          mkdir -p platforms/macos/macos_template.app/Contents/MacOS
          cp -r platforms/macos/macos_template.app .
          mkdir -p macos_template.app/Contents/MacOS
          lipo -create artifacts/${{ env.ITCH_GAME }}* -output macos_template.app/Contents/MacOS/${{ env.ITCH_GAME }}.universal
          tar -acf ${{ env.ITCH_GAME }}_macos.zip macos_template.app
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ITCH_GAME }}_macos
          path: platforms/macos/${{ env.ITCH_GAME }}_macos.zip
  create-release:
    name: Generate a release
    needs: bundle-universal-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ITCH_GAME }}_*
          path: artifacts
          merge-multiple: true
      - name: Get version
        id: get-version
        run: echo "VERSION=$(grep -o -P '(?<=version = ").*(?=")' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: Get changelog
        id: get-changelog
        run: |
          VERSIONS=$(grep "^## \[.*]" ChangeLog.md)
          FIRST_TWO=$(echo "$VERSIONS" | head -2)
          START=$(echo "$FIRST_TWO" | head -1 | sed -e 's/[]\/$*.^[]/\\&/g')
          END=$(echo "$FIRST_TWO" | tail -1 | sed -e 's/[]\/$*.^[]/\\&/g')
          BODY=$(sed -n -r "/$START/,/$END/p" ChangeLog.md | head -n -1)
          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.get-changelog.outputs.CHANGELOG }}
          files: ${{ steps.download-artifacts.outputs.download-path }}/*
          tag_name: ${{ steps.get-version.outputs.VERSION }}
  deploy-pages:
    needs: build-binaries
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ITCH_GAME }}_web
      - name: Unzip web artifact
        run: unzip ${{ env.ITCH_GAME }}_web.zip -d ${{ env.ITCH_GAME }}_web
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.ITCH_GAME }}_web
  deploy-itch:
    needs: bundle-universal-app
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          [
            { name: linux, channel: linux },
            { name: macos, channel: osx },
            { name: web, channel: html5 },
            { name: windows, channel: windows },
          ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}
      - name: Deploy Itch.io build
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: ${{ matrix.platform.channel }}
          PACKAGE: ${{ env.ITCH_GAME }}_${{ matrix.platform.name }}.zip
